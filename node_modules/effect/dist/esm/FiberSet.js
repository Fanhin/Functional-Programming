/**
 * @since 2.0.0
 */
import * as Effect from "effect/Effect";
import * as Fiber from "./Fiber.js";
import { dual } from "./Function.js";
import * as Inspectable from "./Inspectable.js";
import { pipeArguments } from "./Pipeable.js";
import * as Predicate from "./Predicate.js";
/**
 * @since 2.0.0
 * @categories type ids
 */
export const TypeId = /*#__PURE__*/Symbol.for("effect/FiberSet");
/**
 * @since 2.0.0
 * @categories refinements
 */
export const isFiberSet = u => Predicate.hasProperty(u, TypeId);
const Proto = {
  [TypeId]: TypeId,
  [Symbol.iterator]() {
    return this.backing[Symbol.iterator]();
  },
  toString() {
    return Inspectable.format(this.toJSON());
  },
  toJSON() {
    return {
      _id: "FiberMap",
      backing: Inspectable.toJSON(Array.from(this.backing))
    };
  },
  [Inspectable.NodeInspectSymbol]() {
    return this.toJSON();
  },
  pipe() {
    return pipeArguments(this, arguments);
  }
};
const unsafeMake = () => {
  const self = Object.create(Proto);
  self.backing = new Set();
  return self;
};
/**
 * A FiberSet can be used to store a collection of fibers.
 * When the associated Scope is closed, all fibers in the set will be interrupted.
 *
 * You can add fibers to the set using `FiberSet.add` or `FiberSet.run`, and the fibers will
 * be automatically removed from the FiberSet when they complete.
 *
 * @example
 * import { Effect, FiberSet } from "effect"
 *
 * Effect.gen(function*(_) {
 *   const set = yield* _(FiberSet.make())
 *
 *   // run some effects and add the fibers to the set
 *   yield* _(FiberSet.run(set, Effect.never))
 *   yield* _(FiberSet.run(set, Effect.never))
 *
 *   yield* _(Effect.sleep(1000))
 * }).pipe(
 *   Effect.scoped // The fibers will be interrupted when the scope is closed
 * )
 *
 * @since 2.0.0
 * @categories constructors
 */
export const make = () => Effect.acquireRelease(Effect.sync(() => unsafeMake()), clear);
/**
 * Add a fiber to the FiberSet. When the fiber completes, it will be removed.
 *
 * @since 2.0.0
 * @categories combinators
 */
export const unsafeAdd = /*#__PURE__*/dual(2, (self, fiber) => {
  if (self.backing.has(fiber)) {
    return;
  }
  self.backing.add(fiber);
  fiber.addObserver(_ => {
    self.backing.delete(fiber);
  });
});
/**
 * Add a fiber to the FiberSet. When the fiber completes, it will be removed.
 *
 * @since 2.0.0
 * @categories combinators
 */
export const add = /*#__PURE__*/dual(2, (self, fiber) => Effect.sync(() => unsafeAdd(self, fiber)));
/**
 * @since 2.0.0
 * @categories combinators
 */
export const clear = self => Effect.zipRight(Effect.forEach(self.backing, fiber => Fiber.interrupt(fiber)), Effect.sync(() => {
  self.backing.clear();
}));
/**
 * Fork an Effect and add the forked fiber to the FiberSet.
 * When the fiber completes, it will be removed from the FiberSet.
 *
 * @since 2.0.0
 * @categories combinators
 */
export const run = /*#__PURE__*/dual(2, (self, effect) => Effect.tap(Effect.forkDaemon(effect), fiber => add(self, fiber)));
/**
 * @since 2.0.0
 * @categories combinators
 */
export const size = self => Effect.sync(() => self.backing.size);
//# sourceMappingURL=FiberSet.js.map