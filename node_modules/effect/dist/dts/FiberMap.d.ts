/**
 * @since 2.0.0
 */
import * as Effect from "effect/Effect";
import type * as Scope from "effect/Scope";
import type { NoSuchElementException } from "./Cause.js";
import * as Fiber from "./Fiber.js";
import * as FiberId from "./FiberId.js";
import * as Inspectable from "./Inspectable.js";
import * as MutableHashMap from "./MutableHashMap.js";
import * as Option from "./Option.js";
import { type Pipeable } from "./Pipeable.js";
/**
 * @since 2.0.0
 * @categories type ids
 */
export declare const TypeId: unique symbol;
/**
 * @since 2.0.0
 * @categories type ids
 */
export type TypeId = typeof TypeId;
/**
 * @since 2.0.0
 * @categories models
 */
export interface FiberMap<K, E = unknown, A = unknown> extends Pipeable, Inspectable.Inspectable, Iterable<[K, Fiber.RuntimeFiber<E, A>]> {
    readonly [TypeId]: TypeId;
    readonly backing: MutableHashMap.MutableHashMap<K, Fiber.RuntimeFiber<E, A>>;
}
/**
 * @since 2.0.0
 * @categories refinements
 */
export declare const isFiberMap: (u: unknown) => u is FiberMap<unknown, unknown, unknown>;
/**
 * A FiberMap can be used to store a collection of fibers, indexed by some key.
 * When the associated Scope is closed, all fibers in the map will be interrupted.
 *
 * You can add fibers to the map using `FiberMap.set` or `FiberMap.run`, and the fibers will
 * be automatically removed from the FiberMap when they complete.
 *
 * @example
 * import { Effect, FiberMap } from "effect"
 *
 * Effect.gen(function*(_) {
 *   const map = yield* _(FiberMap.make<string>())
 *
 *   // run some effects and add the fibers to the map
 *   yield* _(FiberMap.run(map, "fiber a", Effect.never))
 *   yield* _(FiberMap.run(map, "fiber b", Effect.never))
 *
 *   yield* _(Effect.sleep(1000))
 * }).pipe(
 *   Effect.scoped // The fibers will be interrupted when the scope is closed
 * )
 *
 * @since 2.0.0
 * @categories constructors
 */
export declare const make: <K, E = unknown, A = unknown>() => Effect.Effect<Scope.Scope, never, FiberMap<K, E, A>>;
/**
 * Add a fiber to the FiberMap. When the fiber completes, it will be removed from the FiberMap.
 * If the key already exists in the FiberMap, the previous fiber will be interrupted.
 *
 * @since 2.0.0
 * @categories combinators
 */
export declare const unsafeSet: {
    <K, E, A, XE extends E, XA extends A>(key: K, fiber: Fiber.RuntimeFiber<XE, XA>, interruptAs?: FiberId.FiberId): (self: FiberMap<K, E, A>) => void;
    <K, E, A, XE extends E, XA extends A>(self: FiberMap<K, E, A>, key: K, fiber: Fiber.RuntimeFiber<XE, XA>, interruptAs?: FiberId.FiberId): void;
};
/**
 * Add a fiber to the FiberMap. When the fiber completes, it will be removed from the FiberMap.
 * If the key already exists in the FiberMap, the previous fiber will be interrupted.
 *
 * @since 2.0.0
 * @categories combinators
 */
export declare const set: {
    <K, E, A, XE extends E, XA extends A>(key: K, fiber: Fiber.RuntimeFiber<XE, XA>): (self: FiberMap<K, E, A>) => Effect.Effect<never, never, void>;
    <K, E, A, XE extends E, XA extends A>(self: FiberMap<K, E, A>, key: K, fiber: Fiber.RuntimeFiber<XE, XA>): Effect.Effect<never, never, void>;
};
/**
 * Retrieve a fiber from the FiberMap.
 *
 * @since 2.0.0
 * @categories combinators
 */
export declare const unsafeGet: {
    <K>(key: K): <E, A>(self: FiberMap<K, E, A>) => Option.Option<Fiber.RuntimeFiber<E, A>>;
    <K, E, A>(self: FiberMap<K, E, A>, key: K): Option.Option<Fiber.RuntimeFiber<E, A>>;
};
/**
 * Retrieve a fiber from the FiberMap.
 *
 * @since 2.0.0
 * @categories combinators
 */
export declare const get: {
    <K>(key: K): <E, A>(self: FiberMap<K, E, A>) => Effect.Effect<never, NoSuchElementException, Fiber.RuntimeFiber<E, A>>;
    <K, E, A>(self: FiberMap<K, E, A>, key: K): Effect.Effect<never, NoSuchElementException, Fiber.RuntimeFiber<E, A>>;
};
/**
 * Remove a fiber from the FiberMap, interrupting it if it exists.
 *
 * @since 2.0.0
 * @categories combinators
 */
export declare const remove: {
    <K>(key: K): <E, A>(self: FiberMap<K, E, A>) => Effect.Effect<never, never, void>;
    <K, E, A>(self: FiberMap<K, E, A>, key: K): Effect.Effect<never, never, void>;
};
/**
 * @since 2.0.0
 * @categories combinators
 */
export declare const clear: <K, E, A>(self: FiberMap<K, E, A>) => Effect.Effect<never, never, void>;
/**
 * Run an Effect and add the forked fiber to the FiberMap.
 * When the fiber completes, it will be removed from the FiberMap.
 *
 * @since 2.0.0
 * @categories combinators
 */
export declare const run: {
    <K, E, A, R, XE extends E, XA extends A>(key: K, effect: Effect.Effect<R, XE, XA>): (self: FiberMap<K, E, A>) => Effect.Effect<R, never, Fiber.RuntimeFiber<XE, XA>>;
    <K, E, A, R, XE extends E, XA extends A>(self: FiberMap<K, E, A>, key: K, effect: Effect.Effect<R, XE, XA>): Effect.Effect<R, never, Fiber.RuntimeFiber<XE, XA>>;
};
/**
 * @since 2.0.0
 * @categories combinators
 */
export declare const size: <K, E, A>(self: FiberMap<K, E, A>) => Effect.Effect<never, never, number>;
//# sourceMappingURL=FiberMap.d.ts.map